<?php

/**
 * BaseGroundType
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property Doctrine_Collection $Plants
 * @property Doctrine_Collection $Field
 * @property Doctrine_Collection $Plant_Ground
 * 
 * @method string              getName()         Returns the current record's "name" value
 * @method Doctrine_Collection getPlants()       Returns the current record's "Plants" collection
 * @method Doctrine_Collection getField()        Returns the current record's "Field" collection
 * @method Doctrine_Collection getPlantGround()  Returns the current record's "Plant_Ground" collection
 * @method GroundType          setName()         Sets the current record's "name" value
 * @method GroundType          setPlants()       Sets the current record's "Plants" collection
 * @method GroundType          setField()        Sets the current record's "Field" collection
 * @method GroundType          setPlantGround()  Sets the current record's "Plant_Ground" collection
 * 
 * @package    marina
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseGroundType extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ground_type');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Plant as Plants', array(
             'refClass' => 'Plant_Ground',
             'local' => 'ground_id',
             'foreign' => 'plant_id'));

        $this->hasMany('Field', array(
             'local' => 'id',
             'foreign' => 'ground_type_id'));

        $this->hasMany('Plant_Ground', array(
             'local' => 'id',
             'foreign' => 'ground_id'));
    }
}